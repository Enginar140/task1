using System;
using System.Collections.Generic;
using OfficeOpenXml;
class Program
{
static void Main(string[] args)
    {
        string[] provinces ={
            "Adana",
            "Adıyaman",
            "Afyon",
            "Ağrı",
            "Amasya",
            "Ankara",
            "Antalya",
            "Artvin",
            "Aydın",
            "Balıkesir",
            "Bilecik",
            "Bingöl",
            "Bitlis",
            "Bolu",
            "Burdur",
            "Bursa",
            "Çanakkale",
            "Çankırı",
            "Çorum",
            "Denizli",
            "Diyarbakır",
            "Edirne",
            "Elazığ",
            "Erzincan",
            "Erzurum",
            "Eskişehir",
            "Gaziantep",
            "Giresun",
            "Gümüşhane",
            "Hakkari",
            "Hatay",
            "Isparta",
            "İçel",
            "İstanbul",
            "İzmir",
            "Kars",
            "Kastamonu",
            "Kayseri",
            "Kırklareli",
            "Kırşehir",
            "Kocaeli",
            "Konya",
            "Kütahya",
            "Malatya",
            "Manisa",
            "Kahramanmaraş",
            "Mardin",
            "Muğla",
            "Muş",
            "Nevşehir",
            "Niğde",
            "Ordu",
            "Rize",
            "Sakarya",
            "Samsun",
            "Siirt",
            "Sinop",
            "Sivas",
            "Tekirdağ",
            "Tokat",
            "Trabzon",
            "Tunceli",
            "Şanlıurfa",
            "Uşak",
            "Van",
            "Yozgat",
            "Zonguldak",
            "Aksaray",
            "Bayburt",
            "Karaman",
            "Kırıkkale",
            "Batman",
            "Şırnak",
            "Bartın",
            "Ardahan",
            "Iğdır",
            "Yalova",
            "Karabük",
            "Kilis",
            "Osmaniye",
            "Düzce"

    };
        int[][] distanceMatrix = new int[][]
        {
                new int[] { 0, 339, 578, 980, 602, 491, 546, 1003, 880, 902, 785, 633, 743, 688, 647, 856, 1093, 590, 582, 761, 539, 1183, 496, 676, 809, 690, 218, 720, 780, 899, 198, 618, 70, 951, 905, 1014, 695, 335, 1159, 376, 840, 357, 675, 399, 885, 199, 551, 855, 743, 287, 207, 707, 917, 803, 753, 717, 865, 428, 1081, 492, 838, 632, 357, 690, 902, 489, 764, 268, 801, 292, 485, 630, 720, 783, 1039, 1078, 905, 714, 253, 91, 734 },
                new int[] { 339, 0, 917, 647, 625, 732, 885, 715, 1219, 1241, 1032, 347, 410, 920, 986, 1104, 1383, 762, 697, 1100, 206, 1414, 283, 546, 521, 952, 151, 704, 677, 642, 316, 957, 409, 1182, 1244, 726, 868, 414, 1391, 549, 1072, 696, 1014, 186, 1224, 162, 294, 1194, 455, 497, 546, 730, 770, 1034, 754, 384, 877, 412, 1313, 515, 770, 419, 111, 1029, 569, 613, 996, 573, 674, 631, 658, 297, 464, 1014, 751, 746, 1137, 945, 210, 244, 966 },
                new int[] { 578, 917, 0, 1320, 595, 255, 287, 1224, 340, 324, 207, 1096, 1287, 417, 166, 278, 515, 398, 504, 221, 1108, 682, 959, 955, 1140, 140, 796, 867, 1027, 1477, 776, 167, 571, 450, 327, 1342, 503, 523, 659, 425, 340, 226, 97, 861, 307, 781, 1129, 348, 1206, 444, 461, 823, 1076, 302, 676, 1294, 673, 706, 581, 645, 997, 1078, 935, 112, 1422, 479, 483, 368, 1079, 339, 338, 1207, 1298, 517, 1361, 1464, 346, 448, 832, 669, 371 },
                new int[] { 980, 647, 1320, 0, 740, 1055, 1424, 364, 1634, 1579, 1361, 359, 237, 1146, 1401, 1418, 1697, 985, 830, 1515, 441, 1641, 499, 370, 182, 1298, 762, 539, 380, 429, 956, 1372, 1050, 1409, 1647, 214, 990, 816, 1617, 940, 1298, 1111, 1377, 593, 1627, 815, 518, 1642, 246, 888, 937, 584, 429, 1261, 731, 333, 891, 618, 1539, 674, 474, 418, 618, 1432, 233, 841, 1205, 964, 304, 1112, 985, 370, 429, 1171, 305, 144, 1363, 1106, 817, 885, 1192 },
                new int[] { 602, 625, 595, 740, 0, 330, 822, 679, 934, 845, 626, 641, 832, 411, 760, 683, 962, 245, 91, 816, 703, 906, 535, 375, 560, 573, 576, 322, 436, 1169, 673, 723, 635, 674, 922, 762, 255, 341, 883, 312, 563, 509, 652, 457, 902, 500, 798, 943, 751, 355, 435, 278, 531, 526, 131, 890, 254, 221, 805, 112, 452, 498, 708, 707, 972, 199, 471, 420, 457, 621, 260, 803, 996, 436, 781, 884, 628, 371, 639, 602, 458 },
                new int[] { 491, 732, 255, 1055, 330, 0, 542, 960, 595, 536, 314, 887, 1078, 190, 421, 385, 665, 131, 240, 476, 898, 685, 749, 690, 876, 233, 647, 603, 763, 1328, 689, 383, 485, 453, 582, 1078, 237, 315, 662, 183, 342, 259, 312, 652, 562, 572, 980, 604, 996, 275, 337, 558, 811, 305, 411, 1085, 406, 442, 584, 380, 733, 813, 786, 367, 1212, 214, 266, 224, 815, 370, 74, 998, 1150, 285, 1097, 1199, 407, 216, 711, 582, 237 },
                new int[] { 546, 885, 287, 1424, 822, 542, 0, 1430, 345, 505, 472, 1188, 1289, 682, 121, 543, 693, 685, 732, 226, 1085, 922, 1051, 1059, 1244, 421, 764, 1094, 1163, 1445, 744, 131, 466, 715, 447, 1447, 790, 615, 924, 568, 605, 271, 361, 953, 427, 746, 1097, 309, 1298, 536, 541, 1050, 1303, 567, 903, 1264, 960, 811, 846, 872, 1224, 1182, 903, 290, 1448, 681, 748, 460, 1183, 376, 562, 1176, 1267, 804, 1465, 1568, 610, 735, 800, 637, 636 },
                new int[] { 1003, 715, 1224, 364, 679, 960, 1430, 0, 1564, 1454, 1236, 371, 545, 1021, 1390, 1293, 1572, 881, 720, 1445, 509, 1516, 511, 376, 194, 1202, 846, 357, 312, 755, 980, 1352, 1073, 1284, 1551, 203, 846, 822, 1492, 941, 1173, 1117, 1281, 605, 1531, 827, 604, 1572, 464, 894, 943, 402, 148, 1136, 548, 641, 709, 624, 1414, 616, 227, 424, 686, 1336, 558, 828, 1058, 970, 310, 1118, 889, 563, 737, 1026, 117, 336, 1238, 958, 885, 909, 1067 },
                new int[] { 880, 1219, 340, 1634, 934, 595, 345, 1564, 0, 291, 525, 1398, 1589, 735, 286, 441, 448, 737, 844, 124, 1409, 667, 1260, 1269, 1454, 474, 1098, 1207, 1367, 1778, 1077, 288, 811, 681, 128, 1656, 843, 824, 684, 765, 569, 527, 414, 1163, 152, 1083, 1430, 98, 1507, 745, 762, 1162, 1415, 620, 1016, 1596, 1012, 1020, 617, 984, 1337, 1392, 1236, 272, 1723, 818, 801, 669, 1393, 641, 678, 1508, 1600, 856, 1675, 1777, 507, 787, 1133, 970, 688 },
                new int[] { 902, 1241, 324, 1579, 845, 536, 505, 1454, 291, 0, 257, 1410, 1601, 434, 393, 152, 192, 666, 785, 285, 1421, 419, 1272, 1214, 1400, 303, 1120, 1098, 1257, 1801, 1100, 395, 895, 393, 175, 1602, 680, 847, 436, 706, 280, 550, 227, 1175, 138, 1095, 1453, 389, 1520, 768, 785, 1053, 1306, 319, 906, 1608, 858, 987, 369, 926, 1228, 1337, 1259, 224, 1735, 760, 500, 692, 1297, 663, 619, 1521, 1622, 588, 1564, 1723, 218, 567, 1156, 993, 387 },
                new int[] { 785, 1032, 207, 1361, 626, 314, 472, 1236, 525, 257, 0, 1187, 1378, 215, 351, 95, 374, 447, 563, 406, 1199, 480, 1050, 996, 1181, 80, 948, 879, 1039, 1628, 983, 352, 778, 248, 430, 1383, 462, 616, 457, 483, 138, 433, 110, 953, 393, 873, 1281, 533, 1297, 576, 635, 835, 1088, 100, 688, 1386, 640, 765, 379, 703, 1009, 1119, 1087, 249, 1513, 537, 281, 522, 1078, 546, 397, 1298, 1450, 369, 1345, 1505, 124, 349, 1011, 876, 168 },
                new int[] { 633, 347, 1096, 359, 641, 887, 1188, 371, 1398, 1410, 1187, 0, 192, 1075, 1165, 1259, 1538, 918, 759, 1279, 141, 1570, 141, 272, 177, 1107, 476, 537, 378, 492, 610, 1136, 703, 1338, 1423, 382, 892, 569, 1546, 704, 1227, 875, 1193, 235, 1403, 457, 236, 1406, 111, 652, 701, 582, 426, 1190, 718, 288, 859, 479, 1468, 582, 471, 145, 318, 1208, 327, 699, 1107, 728, 302, 876, 813, 195, 384, 1072, 407, 501, 1292, 1007, 517, 539, 1122 },
                new int[] { 743, 410, 1287, 237, 832, 1078, 1289, 545, 1589, 1601, 1378, 192, 0, 1266, 1356, 1450, 1729, 1109, 950, 1470, 204, 1761, 332, 463, 351, 1298, 525, 711, 552, 324, 719, 1327, 813, 1529, 1614, 452, 1082, 760, 1737, 895, 1418, 1066, 1384, 426, 1594, 572, 281, 1597, 81, 843, 892, 756, 600, 1381, 909, 96, 1050, 670, 1659, 773, 646, 336, 381, 1399, 159, 890, 1298, 919, 476, 1035, 1004, 133, 192, 1263, 484, 336, 1483, 1198, 580, 648, 1312 },
                new int[] { 688, 920, 417, 1146, 411, 190, 682, 1021, 735, 434, 215, 1075, 1266, 0, 561, 272, 551, 233, 348, 616, 1086, 495, 937, 781, 966, 290, 835, 664, 824, 1516, 886, 563, 681, 263, 607, 1168, 247, 504, 471, 371, 152, 455, 321, 840, 570, 760, 1168, 743, 1185, 463, 544, 620, 873, 115, 473, 1273, 425, 630, 394, 521, 794, 904, 974, 459, 1378, 402, 158, 420, 863, 566, 262, 1186, 1338, 176, 1130, 1290, 217, 134, 899, 779, 47 },
                new int[] { 647, 986, 166, 1401, 760, 421, 121, 1390, 286, 393, 351, 1165, 1356, 561, 0, 422, 586, 563, 670, 167, 1176, 826, 1027, 1036, 1221, 300, 865, 1033, 1139, 1546, 845, 29, 574, 594, 388, 1424, 669, 592, 803, 545, 483, 295, 240, 930, 368, 850, 1198, 240, 1275, 513, 530, 988, 1242, 446, 842, 1363, 838, 787, 725, 810, 1163, 1159, 1004, 169, 1491, 644, 627, 437, 1160, 408, 504, 1276, 1367, 682, 1442, 1545, 489, 613, 901, 738, 514 },
                new int[] { 856, 1104, 278, 1418, 683, 385, 543, 1293, 441, 152, 95, 1259, 1450, 272, 422, 0, 270, 504, 634, 435, 1270, 428, 1121, 1053, 1238, 152, 1020, 936, 1096, 1700, 1054, 423, 849, 244, 325, 1440, 518, 688, 445, 555, 131, 504, 182, 1024, 288, 944, 1352, 539, 1369, 648, 706, 891, 1145, 157, 745, 1457, 696, 836, 379, 775, 1066, 1176, 1158, 320, 1585, 609, 338, 594, 1135, 617, 468, 1370, 1522, 426, 1402, 1561, 69, 405, 1083, 947, 225 },
                new int[] { 1093, 1383, 515, 1697, 962, 665, 693, 1572, 448, 192, 374, 1538, 1729, 551, 586, 270, 0, 784, 914, 473, 1550, 231, 1401, 1332, 1517, 431, 1299, 1215, 1375, 1979, 1291, 588, 1087, 314, 327, 1719, 798, 967, 248, 834, 398, 741, 419, 1304, 328, 1224, 1632, 547, 1648, 927, 976, 1171, 1424, 436, 1024, 1737, 976, 1116, 181, 1054, 1345, 1455, 1438, 418, 1864, 888, 617, 873, 1414, 854, 748, 1649, 1801, 705, 1681, 1841, 335, 685, 1362, 1184, 505 },
                new int[] { 590, 762, 398, 985, 245, 131, 685, 881, 737, 666, 447, 918, 1109, 233, 563, 504, 784, 0, 155, 619, 929, 727, 780, 620, 806, 376, 678, 524, 684, 1359, 776, 525, 583, 495, 725, 1008, 106, 346, 704, 214, 385, 354, 455, 683, 705, 603, 1011, 746, 1027, 306, 386, 480, 733, 347, 333, 1116, 275, 442, 626, 333, 654, 743, 817, 510, 1218, 245, 292, 322, 703, 465, 104, 1028, 1180, 278, 990, 1129, 450, 192, 741, 681, 279 },
                new int[] { 582, 697, 504, 830, 91, 240, 732, 720, 844, 785, 563, 759, 950, 348, 670, 634, 914, 155, 0, 725, 770, 843, 602, 465, 651, 482, 613, 363, 523, 1249, 711, 632, 575, 611, 831, 853, 192, 281, 820, 221, 501, 419, 561, 524, 811, 538, 865, 853, 869, 295, 375, 319, 572, 463, 172, 957, 260, 287, 742, 178, 493, 589, 752, 616, 1063, 108, 408, 330, 548, 530, 169, 870, 1063, 373, 829, 974, 566, 308, 676, 640, 395 },
                new int[] { 761, 1100, 221, 1515, 816, 476, 226, 1445, 124, 285, 406, 1279, 1470, 616, 167, 435, 473, 619, 725, 0, 1290, 702, 1141, 1150, 1335, 355, 979, 1088, 1248, 1659, 959, 169, 692, 649, 226, 1537, 724, 706, 719, 646, 539, 409, 296, 1044, 206, 964, 1312, 150, 1389, 627, 644, 1044, 1297, 501, 897, 1477, 894, 901, 652, 866, 1218, 1273, 1118, 153, 1604, 700, 682, 551, 1274, 522, 559, 1390, 1481, 738, 1556, 1659, 501, 669, 1014, 852, 570 },
                new int[] { 539, 206, 1108, 441, 703, 898, 1085, 509, 1409, 1421, 1199, 141, 204, 1086, 1176, 1270, 1550, 929, 770, 1290, 0, 1581, 152, 407, 315, 1119, 321, 675, 516, 471, 515, 1148, 608, 1349, 1435, 520, 957, 581, 1558, 715, 1239, 887, 1204, 246, 1415, 368, 94, 1418, 249, 664, 713, 720, 564, 1201, 832, 187, 956, 490, 1480, 594, 610, 280, 177, 1219, 363, 710, 1162, 740, 440, 831, 824, 99, 293, 1138, 545, 540, 1304, 1073, 375, 444, 1133 },
                new int[] { 1183, 1414, 682, 1641, 906, 685, 922, 1516, 667, 419, 480, 1570, 1761, 495, 826, 428, 231, 727, 843, 702, 1581, 0, 1432, 1276, 1461, 555, 1330, 1159, 1319, 2011, 1380, 828, 1176, 232, 546, 1663, 741, 998, 70, 866, 345, 908, 586, 1335, 556, 1255, 1663, 766, 1679, 958, 1039, 1114, 1368, 380, 968, 1768, 920, 1125, 148, 1016, 1289, 1399, 1469, 642, 1873, 897, 561, 915, 1358, 1021, 757, 1681, 1833, 649, 1625, 1785, 410, 629, 1394, 1273, 448 },
                new int[] { 496, 283, 959, 499, 535, 749, 1051, 511, 1260, 1272, 1050, 141, 332, 937, 1027, 1121, 1401, 780, 602, 1141, 152, 1432, 0, 267, 317, 970, 338, 556, 397, 631, 472, 999, 565, 1200, 1286, 522, 789, 432, 1409, 566, 1090, 738, 1055, 97, 1266, 319, 247, 1269, 251, 515, 564, 601, 560, 1052, 664, 339, 788, 322, 1331, 426, 491, 140, 318, 1070, 466, 542, 1013, 591, 395, 739, 675, 252, 445, 970, 546, 640, 1155, 905, 402, 401, 984 },
                new int[] { 676, 546, 955, 370, 375, 690, 1059, 376, 1269, 1214, 996, 272, 463, 781, 1036, 1053, 1332, 620, 465, 1150, 407, 1276, 267, 0, 191, 933, 602, 295, 136, 800, 748, 1007, 746, 1044, 1282, 393, 625, 451, 1252, 575, 933, 746, 1012, 361, 1262, 575, 501, 1277, 381, 523, 572, 340, 299, 896, 451, 558, 593, 253, 1174, 309, 229, 128, 573, 1067, 603, 476, 840, 599, 157, 747, 620, 467, 654, 806, 412, 514, 998, 741, 665, 677, 827 },
                new int[] { 809, 521, 1140, 182, 560, 876, 1244, 194, 1454, 1400, 1181, 177, 351, 966, 1221, 1238, 1517, 806, 651, 1335, 315, 1461, 317, 191, 0, 1118, 652, 360, 201, 612, 786, 1193, 879, 1229, 1467, 205, 810, 636, 1438, 760, 1118, 932, 1197, 411, 1447, 633, 410, 1463, 270, 709, 757, 405, 249, 1081, 551, 447, 712, 438, 1360, 494, 294, 239, 492, 1252, 415, 661, 1026, 785, 125, 933, 805, 369, 543, 991, 230, 326, 1184, 926, 691, 715, 1013 },
                new int[] { 690, 952, 140, 1298, 573, 233, 421, 1202, 474, 303, 80, 1107, 1298, 290, 300, 152, 431, 376, 482, 355, 1119, 555, 970, 933, 1118, 0, 868, 845, 1005, 1548, 887, 301, 683, 323, 412, 1320, 481, 536, 532, 403, 213, 337, 79, 872, 392, 792, 1200, 482, 1217, 496, 555, 801, 1054, 176, 654, 1306, 651, 684, 454, 623, 975, 1056, 1006, 217, 1433, 457, 356, 442, 1057, 451, 316, 1218, 1370, 444, 1339, 1442, 219, 426, 931, 780, 244 },
                new int[] { 218, 151, 796, 762, 576, 647, 764, 846, 1098, 1120, 948, 476, 525, 835, 865, 1020, 1299, 678, 613, 979, 321, 1330, 338, 602, 652, 868, 0, 694, 754, 681, 194, 836, 288, 1098, 1123, 857, 784, 330, 1307, 464, 988, 575, 893, 241, 1103, 78, 333, 1073, 586, 413, 425, 681, 891, 950, 705, 499, 828, 402, 1229, 466, 812, 475, 139, 908, 684, 529, 912, 486, 730, 510, 574, 412, 502, 930, 881, 860, 1053, 861, 63, 123, 882 },
                new int[] { 720, 704, 867, 539, 322, 603, 1094, 357, 1207, 1098, 879, 537, 711, 664, 1033, 936, 1215, 524, 363, 1088, 675, 1159, 556, 295, 360, 845, 694, 0, 160, 969, 791, 995, 790, 927, 1194, 562, 489, 494, 1135, 584, 816, 781, 924, 536, 1174, 618, 770, 1215, 630, 567, 616, 45, 209, 779, 191, 807, 352, 296, 1057, 259, 130, 418, 787, 979, 772, 471, 701, 693, 235, 791, 532, 729, 903, 669, 466, 683, 881, 601, 757, 720, 710 },
                new int[] { 780, 677, 1027, 380, 436, 763, 1163, 312, 1367, 1257, 1039, 378, 552, 824, 1139, 1096, 1375, 684, 523, 1248, 516, 1319, 397, 136, 201, 1005, 754, 160, 0, 810, 851, 1111, 849, 1087, 1354, 403, 649, 554, 1295, 678, 976, 850, 1084, 491, 1334, 678, 611, 1375, 471, 627, 676, 205, 164, 939, 351, 648, 512, 356, 1217, 370, 94, 259, 703, 1139, 613, 580, 861, 703, 76, 851, 692, 570, 744, 829, 422, 524, 1041, 761, 817, 780, 870 },
                new int[] { 899, 642, 1477, 429, 1169, 1328, 1445, 755, 1778, 1801, 1628, 492, 324, 1516, 1546, 1700, 1979, 1359, 1249, 1659, 471, 2011, 631, 800, 612, 1548, 681, 969, 810, 0, 875, 1517, 968, 1779, 1804, 554, 1419, 1010, 1987, 1145, 1668, 1256, 1573, 725, 1784, 759, 376, 1754, 381, 1093, 1105, 1014, 858, 1631, 1160, 280, 1321, 969, 1909, 1073, 903, 635, 535, 1589, 197, 1189, 1635, 1166, 734, 1191, 1254, 363, 180, 1600, 641, 418, 1733, 1535, 735, 804, 1562 },
                new int[] { 198, 316, 776, 956, 673, 689, 744, 980, 1077, 1100, 983, 610, 719, 886, 845, 1054, 1291, 776, 711, 959, 515, 1380, 472, 748, 786, 887, 194, 791, 851, 875, 0, 816, 268, 1148, 1103, 991, 881, 428, 1357, 562, 1038, 555, 873, 375, 1083, 176, 527, 1053, 719, 485, 405, 779, 989, 1000, 802, 694, 926, 499, 1279, 564, 910, 609, 333, 888, 878, 626, 962, 466, 872, 490, 671, 607, 697, 980, 1015, 1055, 1103, 911, 146, 127, 932 },
                new int[] { 618, 957, 167, 1372, 723, 383, 131, 1352, 288, 395, 352, 1136, 1327, 563, 29, 423, 588, 525, 632, 169, 1148, 828, 999, 1007, 1193, 301, 836, 995, 1111, 1517, 816, 0, 563, 595, 390, 1395, 631, 563, 804, 516, 485, 266, 242, 902, 370, 822, 1169, 269, 1246, 484, 501, 951, 1204, 448, 804, 1335, 800, 759, 726, 772, 1125, 1130, 975, 170, 1462, 606, 629, 408, 1132, 379, 466, 1247, 1339, 645, 1414, 1516, 491, 576, 872, 709, 516 },
                new int[] { 70, 409, 571, 1050, 635, 485, 466, 1073, 811, 895, 778, 703, 813, 681, 574, 849, 1087, 583, 575, 692, 608, 1176, 565, 746, 879, 683, 288, 790, 849, 968, 268, 563, 0, 944, 898, 1084, 689, 328, 1152, 369, 833, 350, 668, 468, 878, 269, 620, 775, 813, 280, 200, 777, 987, 796, 746, 787, 858, 497, 1074, 562, 908, 702, 426, 683, 972, 482, 757, 261, 870, 233, 479, 700, 790, 776, 1109, 1148, 898, 707, 323, 161, 727 },
                new int[] { 951, 1182, 450, 1409, 674, 453, 715, 1284, 681, 393, 248, 1338, 1529, 263, 594, 244, 314, 495, 611, 649, 1349, 232, 1200, 1044, 1229, 323, 1098, 927, 1087, 1779, 1148, 595, 944, 0, 566, 1431, 509, 766, 209, 634, 113, 676, 354, 1103, 529, 1023, 1431, 776, 1447, 726, 806, 882, 1135, 148, 736, 1536, 687, 892, 131, 784, 1057, 1167, 1237, 492, 1641, 665, 329, 683, 1126, 789, 525, 1448, 1600, 417, 1393, 1552, 178, 396, 1161, 1041, 216 },
                new int[] { 905, 1244, 327, 1647, 922, 582, 447, 1551, 128, 175, 430, 1423, 1614, 607, 388, 325, 327, 725, 831, 226, 1435, 546, 1286, 1282, 1467, 412, 1123, 1194, 1354, 1804, 1103, 390, 898, 566, 0, 1669, 830, 850, 563, 752, 453, 553, 334, 1189, 37, 1109, 1456, 226, 1533, 771, 788, 1150, 1403, 492, 1003, 1622, 1000, 1033, 496, 972, 1324, 1405, 1262, 215, 1749, 806, 673, 695, 1406, 666, 665, 1534, 1626, 761, 1688, 1791, 391, 740, 1159, 996, 560 },
                new int[] { 1014, 726, 1342, 214, 762, 1078, 1447, 203, 1656, 1602, 1383, 382, 452, 1168, 1424, 1440, 1719, 1008, 853, 1537, 520, 1663, 522, 393, 205, 1320, 857, 562, 403, 554, 991, 1395, 1084, 1431, 1669, 0, 1012, 838, 1640, 962, 1321, 1134, 1399, 615, 1649, 837, 614, 1665, 347, 911, 960, 607, 344, 1283, 753, 547, 914, 640, 1562, 696, 422, 441, 697, 1454, 357, 864, 1228, 987, 327, 1135, 1007, 585, 643, 1193, 89, 135, 1386, 1128, 895, 919, 1215 },
                new int[] { 695, 868, 503, 990, 255, 237, 790, 846, 843, 680, 462, 892, 1082, 247, 669, 518, 798, 106, 192, 724, 957, 741, 789, 625, 810, 481, 784, 489, 649, 1419, 881, 631, 689, 509, 830, 1012, 0, 452, 718, 319, 399, 460, 567, 711, 810, 708, 1051, 852, 1001, 412, 492, 445, 698, 361, 298, 1144, 179, 474, 640, 365, 619, 748, 922, 615, 1223, 299, 214, 428, 724, 571, 210, 1056, 1286, 181, 955, 1134, 464, 113, 847, 786, 293 },
                new int[] { 335, 414, 523, 816, 341, 315, 615, 822, 824, 847, 616, 569, 760, 504, 592, 688, 967, 346, 281, 706, 581, 998, 432, 451, 636, 536, 330, 494, 554, 1010, 428, 563, 328, 766, 850, 838, 452, 0, 975, 133, 656, 302, 619, 335, 830, 254, 663, 833, 679, 79, 128, 482, 692, 618, 453, 768, 541, 202, 897, 267, 613, 574, 468, 635, 895, 197, 580, 155, 575, 303, 242, 680, 832, 598, 857, 960, 721, 529, 393, 356, 550 },
                new int[] { 1159, 1391, 659, 1617, 883, 662, 924, 1492, 684, 436, 457, 1546, 1737, 471, 803, 445, 248, 704, 820, 719, 1558, 70, 1409, 1252, 1438, 532, 1307, 1135, 1295, 1987, 1357, 804, 1152, 209, 563, 1640, 718, 975, 0, 842, 321, 885, 562, 1312, 572, 1232, 1640, 782, 1656, 935, 1015, 1091, 1344, 357, 944, 1745, 896, 1101, 124, 992, 1265, 1375, 1446, 658, 1850, 874, 538, 891, 1335, 998, 733, 1657, 1809, 625, 1602, 1761, 387, 605, 1370, 1250, 425 },
                new int[] { 376, 549, 425, 940, 312, 183, 568, 941, 765, 706, 483, 704, 895, 371, 545, 555, 834, 214, 221, 646, 715, 866, 566, 575, 760, 403, 464, 584, 678, 1145, 562, 516, 369, 634, 752, 962, 319, 133, 842, 0, 523, 255, 482, 469, 732, 389, 797, 773, 814, 92, 173, 540, 793, 486, 393, 902, 489, 326, 764, 332, 714, 698, 603, 537, 1029, 113, 447, 108, 699, 320, 109, 815, 967, 466, 981, 1084, 588, 397, 528, 467, 417 },
                new int[] { 840, 1072, 340, 1298, 563, 342, 605, 1173, 569, 280, 138, 1227, 1418, 152, 483, 131, 398, 385, 501, 539, 1239, 345, 1090, 933, 1118, 213, 988, 816, 976, 1668, 1038, 485, 833, 113, 453, 1321, 399, 656, 321, 523, 0, 566, 243, 992, 417, 912, 1321, 666, 1337, 616, 696, 772, 1025, 37, 625, 1426, 577, 782, 243, 673, 946, 1056, 1126, 381, 1531, 555, 218, 572, 1015, 679, 414, 1338, 1490, 306, 1282, 1442, 65, 286, 1051, 931, 106 },
                new int[] { 357, 696, 226, 1111, 509, 259, 271, 1117, 527, 550, 433, 875, 1066, 455, 295, 504, 741, 354, 419, 409, 887, 908, 738, 746, 932, 337, 575, 781, 850, 1256, 555, 266, 350, 676, 553, 1134, 460, 302, 885, 255, 566, 0, 323, 641, 533, 560, 908, 536, 985, 223, 240, 737, 990, 528, 590, 1074, 629, 498, 807, 559, 911, 869, 714, 338, 1201, 368, 531, 147, 871, 118, 249, 986, 1078, 550, 1153, 1255, 572, 481, 611, 448, 501 },
                new int[] { 675, 1014, 97, 1377, 652, 312, 361, 1281, 414, 227, 110, 1193, 1384, 321, 240, 182, 419, 455, 561, 296, 1204, 586, 1055, 1012, 1197, 79, 893, 924, 1084, 1573, 873, 242, 668, 354, 334, 1399, 567, 619, 562, 482, 243, 323, 0, 958, 314, 878, 1225, 423, 1302, 540, 558, 880, 1133, 206, 733, 1391, 745, 763, 484, 702, 1054, 1135, 1031, 138, 1518, 536, 387, 464, 1136, 436, 395, 1304, 1395, 475, 1418, 1521, 249, 454, 928, 766, 274 },
                new int[] { 399, 186, 861, 593, 457, 652, 953, 605, 1163, 1175, 953, 235, 426, 840, 930, 1024, 1304, 683, 524, 1044, 246, 1335, 97, 361, 411, 872, 241, 536, 491, 725, 375, 902, 468, 1103, 1189, 615, 711, 335, 1312, 469, 992, 641, 958, 0, 1169, 222, 341, 1172, 344, 418, 467, 562, 654, 955, 586, 433, 710, 244, 1234, 348, 584, 233, 269, 973, 560, 464, 916, 494, 489, 642, 578, 346, 539, 892, 640, 734, 1058, 826, 304, 304, 887 },
                new int[] { 885, 1224, 307, 1627, 902, 562, 427, 1531, 152, 138, 393, 1403, 1594, 570, 368, 288, 328, 705, 811, 206, 1415, 556, 1266, 1262, 1447, 392, 1103, 1174, 1334, 1784, 1083, 370, 878, 529, 37, 1649, 810, 830, 572, 732, 417, 533, 314, 1169, 0, 1089, 1436, 251, 1513, 751, 768, 1130, 1383, 455, 983, 1602, 980, 1013, 506, 952, 1304, 1385, 1242, 195, 1729, 786, 636, 675, 1386, 646, 645, 1514, 1606, 724, 1668, 1771, 354, 704, 1139, 976, 523 },
                new int[] { 199, 162, 781, 815, 500, 572, 746, 827, 1083, 1095, 873, 457, 572, 760, 850, 944, 1224, 603, 538, 964, 368, 1255, 319, 575, 633, 792, 78, 618, 678, 759, 176, 822, 269, 1023, 1109, 837, 708, 254, 1232, 389, 912, 560, 878, 222, 1089, 0, 411, 1055, 566, 338, 386, 605, 816, 875, 629, 547, 753, 326, 1154, 391, 737, 455, 217, 893, 731, 453, 836, 414, 699, 492, 498, 460, 580, 855, 862, 908, 978, 786, 141, 105, 807 },
                new int[] { 551, 294, 1129, 518, 798, 980, 1097, 604, 1430, 1453, 1281, 236, 281, 1168, 1198, 1352, 1632, 1011, 865, 1312, 94, 1663, 247, 501, 410, 1200, 333, 770, 611, 376, 527, 1169, 620, 1431, 1456, 614, 1051, 663, 1640, 797, 1321, 908, 1225, 341, 1436, 411, 0, 1406, 362, 746, 758, 815, 659, 1283, 927, 235, 1050, 585, 1562, 688, 704, 374, 188, 1241, 440, 805, 1244, 819, 535, 843, 906, 148, 198, 1232, 639, 616, 1386, 1167, 388, 456, 1215 },
                new int[] { 855, 1194, 348, 1642, 943, 604, 309, 1572, 98, 389, 533, 1406, 1597, 743, 240, 539, 547, 746, 853, 150, 1418, 766, 1269, 1277, 1463, 482, 1073, 1215, 1375, 1754, 1053, 269, 775, 776, 226, 1665, 852, 833, 782, 773, 666, 536, 423, 1172, 251, 1055, 1406, 0, 1516, 754, 771, 1171, 1424, 629, 1024, 1605, 1021, 1029, 716, 993, 1345, 1400, 1212, 280, 1732, 827, 810, 678, 1402, 649, 687, 1517, 1575, 865, 1684, 1786, 605, 796, 1109, 946, 697 },
                new int[] { 743, 455, 1206, 246, 751, 996, 1298, 464, 1507, 1520, 1297, 111, 81, 1185, 1275, 1369, 1648, 1027, 869, 1389, 249, 1679, 251, 381, 270, 1217, 586, 630, 471, 381, 719, 1246, 813, 1447, 1533, 347, 1001, 679, 1656, 814, 1337, 985, 1302, 344, 1513, 566, 362, 1516, 0, 762, 811, 675, 519, 1299, 828, 177, 969, 589, 1578, 692, 564, 254, 425, 1318, 216, 809, 1217, 838, 395, 986, 923, 214, 273, 1182, 403, 390, 1402, 1117, 624, 648, 1231 },
                new int[] { 287, 497, 444, 888, 355, 275, 536, 894, 745, 768, 576, 652, 843, 463, 513, 648, 927, 306, 295, 627, 664, 958, 515, 523, 709, 496, 413, 567, 627, 1093, 485, 484, 280, 726, 771, 911, 412, 79, 935, 92, 616, 223, 540, 418, 751, 338, 746, 754, 762, 0, 80, 614, 764, 578, 467, 851, 581, 275, 857, 339, 685, 646, 552, 556, 978, 205, 539, 76, 648, 256, 201, 763, 915, 558, 930, 1032, 681, 489, 476, 378, 510 },
                new int[] { 207, 546, 461, 937, 435, 337, 541, 943, 762, 785, 635, 701, 892, 544, 530, 706, 976, 386, 375, 644, 713, 1039, 564, 572, 757, 555, 425, 616, 676, 1105, 405, 501, 200, 806, 788, 960, 492, 128, 1015, 173, 696, 240, 558, 467, 768, 386, 758, 771, 811, 80, 0, 603, 813, 659, 546, 900, 661, 324, 937, 388, 734, 695, 564, 573, 1027, 286, 620, 113, 696, 175, 282, 812, 927, 638, 978, 1081, 761, 570, 460, 298, 590 },
                new int[] { 707, 730, 823, 584, 278, 558, 1050, 402, 1162, 1053, 835, 582, 756, 620, 988, 891, 1171, 480, 319, 1044, 720, 1114, 601, 340, 405, 801, 681, 45, 205, 1014, 779, 951, 777, 882, 1150, 607, 445, 482, 1091, 540, 772, 737, 880, 562, 1130, 605, 815, 1171, 675, 614, 603, 0, 254, 734, 147, 852, 307, 307, 1013, 215, 175, 463, 813, 935, 817, 427, 657, 648, 280, 848, 488, 774, 948, 624, 511, 728, 837, 557, 744, 707, 666 },
                new int[] { 917, 770, 1076, 429, 531, 811, 1303, 148, 1415, 1306, 1088, 426, 600, 873, 1242, 1145, 1424, 733, 572, 1297, 564, 1368, 560, 299, 249, 1054, 891, 209, 164, 858, 989, 1204, 987, 1135, 1403, 344, 698, 692, 1344, 793, 1025, 990, 1133, 654, 1383, 816, 659, 1424, 519, 764, 813, 254, 0, 988, 400, 696, 561, 494, 1266, 468, 79, 422, 741, 1188, 661, 680, 910, 840, 239, 988, 741, 618, 792, 877, 257, 477, 1090, 810, 954, 917, 919 },
                new int[] { 803, 1034, 302, 1261, 526, 305, 567, 1136, 620, 319, 100, 1190, 1381, 115, 446, 157, 436, 347, 463, 501, 1201, 380, 1052, 896, 1081, 176, 950, 779, 939, 1631, 1000, 448, 796, 148, 492, 1283, 361, 618, 357, 486, 37, 528, 206, 955, 455, 875, 1283, 629, 1299, 578, 659, 734, 988, 0, 588, 1388, 540, 745, 279, 636, 909, 1019, 1089, 344, 1493, 517, 181, 535, 978, 642, 377, 1301, 1453, 269, 1245, 1405, 103, 249, 1014, 893, 68 },
                new int[] { 753, 754, 676, 731, 131, 411, 903, 548, 1016, 906, 688, 718, 909, 473, 842, 745, 1024, 333, 172, 897, 832, 968, 664, 451, 551, 654, 705, 191, 351, 1160, 802, 804, 746, 736, 1003, 753, 298, 453, 944, 393, 625, 590, 733, 586, 983, 629, 927, 1024, 828, 467, 546, 147, 400, 588, 0, 1019, 161, 350, 866, 241, 321, 575, 837, 788, 963, 280, 510, 501, 426, 702, 341, 932, 1125, 478, 657, 875, 690, 410, 768, 731, 519 },
                new int[] { 717, 384, 1294, 333, 890, 1085, 1264, 641, 1596, 1608, 1386, 288, 96, 1273, 1363, 1457, 1737, 1116, 957, 1477, 187, 1768, 339, 558, 447, 1306, 499, 807, 648, 280, 694, 1335, 787, 1536, 1622, 547, 1144, 768, 1745, 902, 1426, 1074, 1391, 433, 1602, 547, 235, 1605, 177, 851, 900, 852, 696, 1388, 1019, 0, 1143, 677, 1667, 781, 741, 431, 355, 1406, 255, 897, 1349, 927, 572, 1010, 1011, 87, 100, 1325, 580, 431, 1491, 1260, 554, 623, 1320 },
                new int[] { 865, 877, 673, 891, 254, 406, 960, 709, 1012, 858, 640, 859, 1050, 425, 838, 696, 976, 275, 260, 894, 956, 920, 788, 593, 712, 651, 828, 352, 512, 1321, 926, 800, 858, 687, 1000, 914, 179, 541, 896, 489, 577, 629, 745, 710, 980, 753, 1050, 1021, 969, 581, 661, 307, 561, 540, 161, 1143, 0, 473, 818, 364, 482, 716, 960, 785, 1124, 368, 392, 597, 587, 740, 379, 1055, 1248, 359, 818, 1035, 642, 291, 891, 855, 471 },
                new int[] { 428, 412, 706, 618, 221, 442, 811, 624, 1020, 987, 765, 479, 670, 630, 787, 836, 1116, 442, 287, 901, 490, 1125, 322, 253, 438, 684, 402, 296, 356, 969, 499, 759, 497, 892, 1033, 640, 474, 202, 1101, 326, 782, 498, 763, 244, 1013, 326, 585, 1029, 589, 275, 324, 307, 494, 745, 350, 677, 473, 0, 1023, 111, 415, 376, 495, 818, 804, 228, 690, 351, 377, 499, 371, 590, 783, 655, 659, 762, 847, 590, 465, 428, 676 },
                new int[] { 1081, 1313, 581, 1539, 805, 584, 846, 1414, 617, 369, 379, 1468, 1659, 394, 725, 379, 181, 626, 742, 652, 1480, 148, 1331, 1174, 1360, 454, 1229, 1057, 1217, 1909, 1279, 726, 1074, 131, 496, 1562, 640, 897, 124, 764, 243, 807, 484, 1234, 506, 1154, 1562, 716, 1578, 857, 937, 1013, 1266, 279, 866, 1667, 818, 1023, 0, 914, 1187, 1297, 1368, 592, 1772, 796, 460, 813, 1257, 920, 655, 1579, 1731, 548, 1524, 1683, 309, 527, 1292, 1172, 347 },
                new int[] { 492, 515, 645, 674, 112, 380, 872, 616, 984, 926, 703, 582, 773, 521, 810, 775, 1054, 333, 178, 866, 594, 1016, 426, 309, 494, 623, 466, 259, 370, 1073, 564, 772, 562, 784, 972, 696, 365, 267, 992, 332, 673, 559, 702, 348, 952, 391, 688, 993, 692, 339, 388, 215, 468, 636, 241, 781, 364, 111, 914, 0, 389, 432, 598, 757, 908, 219, 581, 415, 391, 563, 309, 693, 886, 546, 715, 818, 738, 481, 529, 492, 567 },
                new int[] { 838, 770, 997, 474, 452, 733, 1224, 227, 1337, 1228, 1009, 471, 646, 794, 1163, 1066, 1345, 654, 493, 1218, 610, 1289, 491, 229, 294, 975, 812, 130, 94, 903, 910, 1125, 908, 1057, 1324, 422, 619, 613, 1265, 714, 946, 911, 1054, 584, 1304, 737, 704, 1345, 564, 685, 734, 175, 79, 909, 321, 741, 482, 415, 1187, 389, 0, 352, 796, 1109, 707, 601, 832, 761, 169, 909, 662, 663, 837, 799, 336, 556, 1011, 731, 875, 839, 840 },
                new int[] { 632, 419, 1078, 418, 498, 813, 1182, 424, 1392, 1337, 1119, 145, 336, 904, 1159, 1176, 1455, 743, 589, 1273, 280, 1399, 140, 128, 239, 1056, 475, 418, 259, 635, 609, 1130, 702, 1167, 1405, 441, 748, 574, 1375, 698, 1056, 869, 1135, 233, 1385, 455, 374, 1400, 254, 646, 695, 463, 422, 1019, 575, 431, 716, 376, 1297, 432, 352, 0, 445, 1190, 470, 599, 964, 722, 256, 870, 743, 340, 527, 929, 460, 562, 1121, 864, 538, 537, 950 },
                new int[] { 357, 111, 935, 618, 708, 786, 903, 686, 1236, 1259, 1087, 318, 381, 974, 1004, 1158, 1438, 817, 752, 1118, 177, 1469, 318, 573, 492, 1006, 139, 787, 703, 535, 333, 975, 426, 1237, 1262, 697, 922, 468, 1446, 603, 1126, 714, 1031, 269, 1242, 217, 188, 1212, 425, 552, 564, 813, 741, 1089, 837, 355, 960, 495, 1368, 598, 796, 445, 0, 1047, 540, 667, 1050, 624, 617, 649, 712, 268, 357, 1069, 721, 716, 1191, 1000, 193, 262, 1021 },
                new int[] { 690, 1029, 112, 1432, 707, 367, 290, 1336, 272, 224, 249, 1208, 1399, 459, 169, 320, 418, 510, 616, 153, 1219, 642, 1070, 1067, 1252, 217, 908, 979, 1139, 1589, 888, 170, 683, 492, 215, 1454, 615, 635, 658, 537, 381, 338, 138, 973, 195, 893, 1241, 280, 1318, 556, 573, 935, 1188, 344, 788, 1406, 785, 818, 592, 757, 1109, 1190, 1047, 0, 1533, 591, 525, 480, 1191, 451, 450, 1319, 1410, 629, 1473, 1576, 387, 560, 943, 781, 412 },
                new int[] { 902, 569, 1422, 233, 972, 1212, 1448, 558, 1723, 1735, 1513, 327, 159, 1378, 1491, 1585, 1864, 1218, 1063, 1604, 363, 1873, 466, 603, 415, 1433, 684, 772, 613, 197, 878, 1462, 972, 1641, 1749, 357, 1223, 895, 1850, 1029, 1531, 1201, 1518, 560, 1729, 731, 440, 1732, 216, 978, 1027, 817, 661, 1493, 963, 255, 1124, 804, 1772, 908, 707, 470, 540, 1533, 0, 1024, 1438, 1054, 537, 1202, 1138, 292, 351, 1403, 444, 222, 1596, 1338, 739, 807, 1425 },
                new int[] { 489, 613, 479, 841, 199, 214, 681, 828, 818, 760, 537, 699, 890, 402, 644, 609, 888, 245, 108, 700, 710, 897, 542, 476, 661, 457, 529, 471, 580, 1189, 626, 606, 482, 665, 806, 864, 299, 197, 874, 113, 555, 368, 536, 464, 786, 453, 805, 827, 809, 205, 286, 427, 680, 517, 280, 897, 368, 228, 796, 219, 601, 599, 667, 591, 1024, 0, 478, 222, 600, 433, 143, 810, 1003, 497, 882, 985, 620, 428, 592, 555, 449 },
                new int[] { 764, 996, 483, 1205, 471, 266, 748, 1058, 801, 500, 281, 1107, 1298, 158, 627, 338, 617, 292, 408, 682, 1162, 561, 1013, 840, 1026, 356, 912, 701, 861, 1635, 962, 629, 757, 329, 673, 1228, 214, 580, 538, 447, 218, 531, 387, 916, 636, 836, 1244, 810, 1217, 539, 620, 657, 910, 181, 510, 1349, 392, 690, 460, 581, 832, 964, 1050, 525, 1438, 478, 0, 496, 923, 642, 338, 1262, 1414, 88, 1168, 1349, 284, 101, 975, 855, 113 },
                new int[] { 268, 573, 368, 964, 420, 224, 460, 970, 669, 692, 522, 728, 919, 420, 437, 594, 873, 322, 330, 551, 740, 915, 591, 599, 785, 442, 486, 693, 703, 1166, 466, 408, 261, 683, 695, 987, 428, 155, 891, 108, 572, 147, 464, 494, 675, 414, 819, 678, 838, 76, 113, 648, 840, 535, 501, 927, 597, 351, 813, 415, 761, 722, 624, 480, 1054, 222, 496, 0, 724, 212, 218, 839, 988, 515, 1006, 1108, 637, 446, 521, 359, 466 },
                new int[] { 801, 674, 1079, 304, 457, 815, 1183, 310, 1393, 1297, 1078, 302, 476, 863, 1160, 1135, 1414, 703, 548, 1274, 440, 1358, 395, 157, 125, 1057, 730, 235, 76, 734, 872, 1132, 870, 1126, 1406, 327, 724, 575, 1335, 699, 1015, 871, 1136, 489, 1386, 699, 535, 1402, 395, 648, 696, 280, 239, 978, 426, 572, 587, 377, 1257, 391, 169, 256, 617, 1191, 537, 600, 923, 724, 0, 872, 744, 494, 668, 904, 346, 448, 1080, 823, 793, 801, 910 },
                new int[] { 292, 631, 339, 1112, 621, 370, 376, 1118, 641, 663, 546, 876, 1035, 566, 408, 617, 854, 465, 530, 522, 831, 1021, 739, 747, 933, 451, 510, 791, 851, 1191, 490, 379, 233, 789, 666, 1135, 571, 303, 998, 320, 679, 118, 436, 642, 646, 492, 843, 649, 986, 256, 175, 848, 988, 642, 702, 1010, 740, 499, 920, 563, 909, 870, 649, 451, 1202, 433, 642, 212, 872, 0, 361, 922, 1013, 661, 1154, 1256, 685, 592, 546, 383, 613 },
                new int[] { 485, 658, 338, 985, 260, 74, 562, 889, 678, 619, 397, 813, 1004, 262, 504, 468, 748, 104, 169, 559, 824, 757, 675, 620, 805, 316, 574, 532, 692, 1254, 671, 466, 479, 525, 665, 1007, 210, 242, 733, 109, 414, 249, 395, 578, 645, 498, 906, 687, 923, 201, 282, 488, 741, 377, 341, 1011, 379, 371, 655, 309, 662, 743, 712, 450, 1138, 143, 338, 218, 744, 361, 0, 924, 1076, 357, 1026, 1128, 479, 288, 637, 576, 308 },
                new int[] { 630, 297, 1207, 370, 803, 998, 1176, 563, 1508, 1521, 1298, 195, 133, 1186, 1276, 1370, 1649, 1028, 870, 1390, 99, 1681, 252, 467, 369, 1218, 412, 729, 570, 363, 607, 1247, 700, 1448, 1534, 585, 1056, 680, 1657, 815, 1338, 986, 1304, 346, 1514, 460, 148, 1517, 214, 763, 812, 774, 618, 1301, 932, 87, 1055, 590, 1579, 693, 663, 340, 268, 1319, 292, 810, 1262, 839, 494, 922, 924, 0, 183, 1237, 599, 469, 1403, 1172, 467, 535, 1232 },
                new int[] { 720, 464, 1298, 429, 996, 1150, 1267, 737, 1600, 1622, 1450, 384, 192, 1338, 1367, 1522, 1801, 1180, 1063, 1481, 293, 1833, 445, 654, 543, 1370, 502, 903, 744, 180, 697, 1339, 790, 1600, 1626, 643, 1286, 832, 1809, 967, 1490, 1078, 1395, 539, 1606, 580, 198, 1575, 273, 915, 927, 948, 792, 1453, 1125, 100, 1248, 783, 1731, 886, 837, 527, 357, 1410, 351, 1003, 1414, 988, 668, 1013, 1076, 183, 0, 1432, 676, 527, 1555, 1364, 557, 626, 1384 },
                new int[] { 783, 1014, 517, 1171, 436, 285, 804, 1026, 856, 588, 369, 1072, 1263, 176, 682, 426, 705, 278, 373, 738, 1138, 649, 970, 806, 991, 444, 930, 669, 829, 1600, 980, 645, 776, 417, 761, 1193, 181, 598, 625, 466, 306, 550, 475, 892, 724, 855, 1232, 865, 1182, 558, 638, 624, 877, 269, 478, 1325, 359, 655, 548, 546, 799, 929, 1069, 629, 1403, 497, 88, 515, 904, 661, 357, 1237, 1432, 0, 1135, 1315, 371, 86, 993, 873, 201 },
                new int[] { 1039, 751, 1361, 305, 781, 1097, 1465, 117, 1675, 1564, 1345, 407, 484, 1130, 1442, 1402, 1681, 990, 829, 1556, 545, 1625, 546, 412, 230, 1339, 881, 466, 422, 641, 1015, 1414, 1109, 1393, 1688, 89, 955, 857, 1602, 981, 1282, 1153, 1418, 640, 1668, 862, 639, 1684, 403, 930, 978, 511, 257, 1245, 657, 580, 818, 659, 1524, 715, 336, 460, 721, 1473, 444, 882, 1168, 1006, 346, 1154, 1026, 599, 676, 1135, 0, 222, 1347, 1067, 920, 944, 1177 },
                new int[] { 1078, 746, 1464, 144, 884, 1199, 1568, 336, 1777, 1723, 1505, 501, 336, 1290, 1545, 1561, 1841, 1129, 974, 1659, 540, 1785, 640, 514, 326, 1442, 860, 683, 524, 418, 1055, 1516, 1148, 1552, 1791, 135, 1134, 960, 1761, 1084, 1442, 1255, 1521, 734, 1771, 908, 616, 1786, 390, 1032, 1081, 728, 477, 1405, 875, 431, 1035, 762, 1683, 818, 556, 562, 716, 1576, 222, 985, 1349, 1108, 448, 1256, 1128, 469, 527, 1315, 222, 0, 1507, 1250, 915, 984, 1336 },
                new int[] { 905, 1137, 346, 1363, 628, 407, 610, 1238, 507, 218, 124, 1292, 1483, 217, 489, 69, 335, 450, 566, 501, 1304, 410, 1155, 998, 1184, 219, 1053, 881, 1041, 1733, 1103, 491, 898, 178, 391, 1386, 464, 721, 387, 588, 65, 572, 249, 1058, 354, 978, 1386, 605, 1402, 681, 761, 837, 1090, 103, 690, 1491, 642, 847, 309, 738, 1011, 1121, 1191, 387, 1596, 620, 284, 637, 1080, 685, 479, 1403, 1555, 371, 1347, 1507, 0, 351, 1116, 996, 171 },
                new int[] { 714, 945, 448, 1106, 371, 216, 735, 958, 787, 567, 349, 1007, 1198, 134, 613, 405, 685, 192, 308, 669, 1073, 629, 905, 741, 926, 426, 861, 601, 761, 1535, 911, 576, 707, 396, 740, 1128, 113, 529, 605, 397, 286, 481, 454, 826, 704, 786, 1167, 796, 1117, 489, 570, 557, 810, 249, 410, 1260, 291, 590, 527, 481, 731, 864, 1000, 560, 1338, 428, 101, 446, 823, 592, 288, 1172, 1364, 86, 1067, 1250, 351, 0, 925, 804, 180 },
                new int[] { 253, 210, 832, 817, 639, 711, 800, 885, 1133, 1156, 1011, 517, 580, 899, 901, 1083, 1362, 741, 676, 1014, 375, 1394, 402, 665, 691, 931, 63, 757, 817, 735, 146, 872, 323, 1161, 1159, 895, 847, 393, 1370, 528, 1051, 611, 928, 304, 1139, 141, 388, 1109, 624, 476, 460, 744, 954, 1014, 768, 554, 891, 465, 1292, 529, 875, 538, 193, 943, 739, 592, 975, 521, 793, 546, 637, 467, 557, 993, 920, 915, 1116, 925, 0, 159, 945 },
                new int[] { 91, 244, 669, 885, 602, 582, 637, 909, 970, 993, 876, 539, 648, 779, 738, 947, 1184, 681, 640, 852, 444, 1273, 401, 677, 715, 780, 123, 720, 780, 804, 127, 709, 161, 1041, 996, 919, 786, 356, 1250, 467, 931, 448, 766, 304, 976, 105, 456, 946, 648, 378, 298, 707, 917, 893, 731, 623, 855, 428, 1172, 492, 839, 537, 262, 781, 807, 555, 855, 359, 801, 383, 576, 535, 626, 873, 944, 984, 996, 804, 159, 0, 825 },
                new int[] { 734, 966, 371, 1192, 458, 237, 636, 1067, 688, 387, 168, 1122, 1312, 47, 514, 225, 505, 279, 395, 570, 1133, 448, 984, 827, 1013, 244, 882, 710, 870, 1562, 932, 516, 727, 216, 560, 1215, 293, 550, 425, 417, 106, 501, 274, 887, 523, 807, 1215, 697, 1231, 510, 590, 666, 919, 68, 519, 1320, 471, 676, 347, 567, 840, 950, 1021, 412, 1425, 449, 113, 466, 910, 613, 308, 1232, 1384, 201, 1177, 1336, 171, 180, 945, 825, 0 }
                    };
        Random random = new Random();
        for (int i = 0; i <10; i++)
        {
            int firstProvince = random.Next(0, 81);
            int secondProvince = random.Next(0, 81);
            while(firstProvince == secondProvince)
            {
                firstProvince = random.Next(0, 81);
            }
            Console.WriteLine($"{provinces[firstProvince]} ({firstProvince + 1}) - {provinces[secondProvince]} ({secondProvince + 1}): {distanceMatrix[firstProvince][secondProvince]} km");
            
        }



        // distanceMatrix debug
        //for (int i = 0; i < 81; i++)
        //{

        //    for (int j = 0; j < 81; j++)
        //    {
        //        Console.Write($"{distanceMatrix[i][j]} ");
        //    }
        //    Console.WriteLine("");
        //    Console.WriteLine("");
        //    Console.WriteLine("");

        //}




        int[][] borderMatrix = Array.ConvertAll(distanceMatrix, row => (int[])row.Clone());


        Dictionary<int, List<int>> provinceWithNeigbour = new Dictionary<int, List<int>>()
        {
            { 1, new List<int>{ 33, 31, 80, 37, 38, 46, 63 } },
            { 2, new List<int>{ 21, 27, 46, 63 } },
            { 3, new List<int>{ 7, 9, 16, 26, 32, 43, 64, 42, 50, 58 } },
            { 4, new List<int>{ 36, 76, 65, 25 } },
            { 5, new List<int>{ 52, 19, 60, 55, 58 } },
            { 6, new List<int>{ 14, 16, 26, 71, 81, 66, 68, 78, 50 , 31 } },
            { 7, new List<int>{ 20, 32, 3, 15 } },
            { 8, new List<int>{ 61, 53, 25, 69, 75 } },
            { 9, new List<int>{ 35, 45, 3, 20 } },
            { 10, new List<int>{ 16, 34, 41, 54, 17, 22, 52 } },
            { 11, new List<int>{ 16, 43, 26, 10 } },
            { 12, new List<int>{ 21, 23, 24, 25, 62, 63 } },
            { 13, new List<int>{ 65, 76, 47, 49, 56 } },
            { 14, new List<int>{ 67, 81, 78, 71, 26, 67, 16 } },
            { 15, new List<int>{ 32, 3, 20, 30 } },
            { 16, new List<int>{ 34, 11, 26, 10 } },
            { 17, new List<int>{ 22, 10, 11 } },
            { 18, new List<int>{ 78, 71, 6, 50, 37 } },
            { 19, new List<int>{ 71, 55, 5, 60, 66, 50 } },
            { 20, new List<int>{ 9, 45, 48, 32 } },
            { 21, new List<int>{ 47, 63, 62, 46, 27 } },
            { 22, new List<int>{ 17, 11, 39 } },
            { 23, new List<int>{ 62, 46, 24, 44 } },
            { 24, new List<int>{ 25, 69, 29, 23, 44 } },
            { 25, new List<int>{ 76, 24, 12, 13, 36, 53 } },
            { 26, new List<int>{ 16, 10, 3, 32, 14, 41 } },
            { 27, new List<int>{ 46, 31, 21, 80, 2 } },
            { 28, new List<int>{ 52, 53, 61 } },
            { 29, new List<int>{ 60, 53, 69 } },
            { 30, new List<int>{ 65, 76, 73 } },
            { 31, new List<int>{ 1, 33, 80, 63, 46 } },
            { 32, new List<int>{ 20, 7, 42, 15 } },
            { 33, new List<int>{ 1, 31, 73 } },
            { 34, new List<int>{ 41, 77, 59, 67, 16 } },
            { 35, new List<int>{ 9, 45, 20 } },
            { 36, new List<int>{ 8, 25, 76 } },
            { 37, new List<int>{ 5, 71, 81, 6, 57 } },
            { 38, new List<int>{ 66, 50, 3, 46, 68 } },
            { 39, new List<int>{ 22, 59, 34 } },
            { 40, new List<int>{ 71, 50, 68 } },
            { 41, new List<int>{ 77, 34, 16 } },
            { 42, new List<int>{ 3, 70, 51, 71 } },
            { 43, new List<int>{ 10, 16, 3, 64 } },
            { 44, new List<int>{ 23, 24, 12, 47 } },
            { 45, new List<int>{ 9, 35, 20 } },
            { 46, new List<int>{ 63, 2, 23, 27, 32 } },
            { 47, new List<int>{ 21, 63, 13, 56, 74 } },
            { 48, new List<int>{ 20, 7, 45 } },
            { 49, new List<int>{ 12, 13, 65 } },
            { 50, new List<int>{ 71, 3, 19, 40 } },
            { 51, new List<int>{ 50, 38, 66 } },
            { 52, new List<int>{ 28, 5, 55 } },
            { 53, new List<int>{ 25, 28, 8 } },
            { 54, new List<int>{ 16, 67, 77, 41 } },
            { 55, new List<int>{ 52, 19, 57 } },
            { 56, new List<int>{ 73, 47, 74 } },
            { 57, new List<int>{ 28, 5 } },
            { 58, new List<int>{ 5, 40, 38, 19 } },
            { 59, new List<int>{ 34, 22, 41 } },
            { 60, new List<int>{ 19, 58 } },
            { 61, new List<int>{ 53, 28, 8 } },
            { 62, new List<int>{ 44, 21, 12 } },
            { 63, new List<int>{ 2, 47, 80, 27 } },
            { 64, new List<int>{ 3, 35, 20 } },
            { 65, new List<int>{ 30, 49 } },
            { 66, new List<int>{ 38, 19, 51 } },
            { 67, new List<int>{ 81, 14, 54 } },
            { 68, new List<int>{ 38, 66 } },
            { 69, new List<int>{ 25, 53 } },
            { 70, new List<int>{ 42, 33 } },
            { 71, new List<int>{ 40, 37 } },
            { 72, new List<int>{ 13, 56 } },
            { 73, new List<int>{ 30, 56 } },
            { 74, new List<int>{ 67, 81 } },
            { 75, new List<int>{ 36, 69 } },
            { 76, new List<int>{ 36, 65 } },
            { 77, new List<int>{ 41, 16 } },
            { 78, new List<int>{ 37, 81 } },
            { 79, new List<int>{ 63, 31 } },
            { 80, new List<int>{ 27, 63, 1 } },
            { 81, new List<int>{ 67, 78 } }
        };

        for (int i = 0; i < 81; i++)
        {
            for (int j = 0; j < 81; j++)
            {
                if (i != j && (provinceWithNeigbour.ContainsKey(i + 1) && !provinceWithNeigbour[i + 1].Contains(j + 1)))
                {
                    borderMatrix[i][j] = int.MaxValue;
                }
            }
        }




        //BorderMatrix debug

        //for (int i = 0;i < 81; i++)
        //{
            
        //    for(int j = 0;j < 81; j++)
        //    {
        //        Console.Write($"{borderMatrix[i][j]} ");
        //    }
        //    Console.WriteLine("");
        //    Console.WriteLine("");
        //    Console.WriteLine("");

        //}




        // Kaynak şehirden hedef şehre olan en kısa mesafeyi döndür
        static int Dijkstra(int[][] graph, int source, int destination)
        {
            int n = graph.Length; // Şehir sayısı
            int[] mesafe = new int[n]; // Şehirlerin kaynak noktaya olan mesafeleri
            bool[] ziyaretEdilen = new bool[n]; // Ziyaret edilen şehirler

            // Tüm mesafeleri sonsuz olarak başlat
            for (int i = 0; i < n; i++)
            {
                mesafe[i] = int.MaxValue;
                ziyaretEdilen[i] = false;
            }

            mesafe[source] = 0; // Başlangıç şehrinin mesafesi 0

            for (int count = 0; count < n - 1; count++)
            {
                int u = MinDistance(mesafe, ziyaretEdilen, n);
                ziyaretEdilen[u] = true;

                for (int v = 0; v < graph[u].Length; v++)
                {
                    if (!ziyaretEdilen[v] && graph[u][v] != int.MaxValue && mesafe[u] != int.MaxValue && mesafe[u] + graph[u][v] < mesafe[v])
                    {
                        mesafe[v] = mesafe[u] + graph[u][v];
                    }
                }
            }

            return mesafe[destination]; // Hedef şehre olan en kısa mesafeyi döndür
        }

        // Minimum mesafe düğümünü bulmak için yardımcı fonksiyon
        static int MinDistance(int[] dist, bool[] visited, int n)
        {
            int min = int.MaxValue, minIndex = -1;

            for (int v = 0; v < n; v++)
            {
                if (visited[v] == false && dist[v] <= min)
                {
                    min = dist[v];
                    minIndex = v;
                }
            }

            return minIndex;
        }

        for (int province1=0; province1 < 81; province1++)
        {

            for(int province2=0; province2 < 81; province2++)
            {
                if (province1 != province2)
                {
                    int minDistances = Dijkstra(borderMatrix, province1, province2);
                    int normalDistance = distanceMatrix[province1][province2];

                    int difference = normalDistance - minDistances;

                    Console.WriteLine($"{provinces[province1]} - {provinces[province2]}: Orijinal: {normalDistance} km, Hesaplanan: {minDistances} km, Fark: {difference}");
                }
            }
        }


        string[] district = new string[]
{
            "ALİAĞA",
            "BALÇOVA",
            "BAYINDIR",
            "BAYRAKLI",
            "BERGAMA",
            "BEYDAĞ",
            "BORNOVA",
            "BUCA",
            "ÇEŞME",
            "ÇİĞLİ",
            "DİKİLİ",
            "FOÇA",
            "GAZİEMİR",
            "GÜZELBAHÇE",
            "KARABAĞLAR",
            "KARABURUN",
            "KARŞIYAKA",
            "KEMALPAŞA",
            "KINIK",
            "KİRAZ",
            "KONAK",
            "MENDERES",
            "MENEMEN",
            "MERKEZ",
            "NARLIDERE",
            "ÖDEMİŞ",
            "SEFERİHİSAR",
            "SELÇUK",
            "TİRE",
            "TORBALI",
            "URLA"
};
        double[,] districtdistanceMatrix = {
    { 0, 90.62010846999999, 124.37993493, 55.063957609999996, 47.33268555, 187.9057912, 60.886159989999996, 76.32388493, 59.62335529, 40.66317054, 79.89328531, 107.13669319, 83.29915706999999, 181.99003256, 50.295200210000004, 79.18384399, 63.7969012, 63.49443205, 188.60054317, 95.76637661, 25.81469679, 95.79714647, 126.75365525000001, 128.83688235000002, 99.6847345, 137.55889965, 119.02083056, 165.00235762, 40.553906839999996, 160.16993926 },
    { 90.62010846999999, 0, 74.53056735, 36.88568374, 137.95279402, 138.05642361, 34.262539970000006, 14.296223540000002, 150.24346376, 96.53481716, 10.72682316, 16.51658472, 14.28978948, 91.36992409, 41.65444114, 49.880702539999994, 154.41700967, 16.41910417, 138.75117559, 45.91700902, 64.80541167000001, 5.177038, 36.133546779999996, 78.98751476, 49.83536692, 87.70953206, 28.400722090000002, 74.38224916, 46.26772331, 110.32057166999999 },
    { 124.37993493, 74.53056735, 0, 70.64551021, 171.71262049, 63.52585627, 68.02236644, 60.23434381, 184.00329023, 130.29464363, 63.803744189999996, 91.04715206, 67.20961595, 165.90049144, 75.41426759999999, 60.252069590000005, 188.17683613999998, 69.33893064, 64.22060824, 58.38326577, 98.56523814, 79.70760535, 110.66411413, 58.492615730000004, 29.34046788, 18.109396320000002, 102.93128943, 148.9128165, 80.02754977000001, 35.79000432 },
    { 55.063957609999996, 36.88568374, 70.64551021, 0, 102.39664316000001, 134.17136647, 7.15173526, 22.5894602, 114.6873129, 60.9786663, 26.15886058, 53.40226846, 10.55978912, 128.25560782999997, 4.7687574, 25.44941926, 118.86085881, 8.430474440000001, 134.86611845, 42.03195188, 29.24926082, 42.06272174, 73.01923052, 75.10245762000001, 45.95030978, 83.82447492, 65.28640583, 111.26793289999999, 10.71157245, 106.43551453 },
    { 47.33268555, 137.95279402, 171.71262049, 102.39664316000001, 0, 235.23847676000003, 108.21884555, 123.65657048, 29.64652934, 87.9958561, 127.22597085999999, 154.46937874, 130.63184263, 229.32271811, 97.62788576, 126.51652954999999, 19.16663329, 110.82711760000001, 235.93322873, 143.09906216, 73.14738235, 143.12983203, 174.0863408, 176.1695679, 147.01742006, 184.8915852, 166.35351611, 212.33504318, 87.88659239, 207.50262481000001 },
    { 187.9057912, 138.05642361, 63.52585627, 134.17136647, 235.23847676000003, 0, 131.5482227, 123.76020008, 247.52914649, 193.82049990000002, 127.32960045, 154.57300833, 130.73547222, 229.42634771, 138.94012387, 123.77792585, 210.48011813, 132.8647869, 22.86245531, 121.90912204, 162.09109441, 143.23346161999999, 174.1899704, 101.80245607, 92.86632415, 62.14262049, 166.45714569999998, 212.43867277, 143.55340604, 27.73585194 },
    { 60.886159989999996, 34.262539970000006, 68.02236644, 7.15173526, 108.21884555, 131.5482227, 0, 19.96631643, 120.50951528, 66.80086869, 23.53571681, 50.779124689999996, 26.94158857, 125.63246406, 11.92049266, 19.212667449999998, 124.68306119, 12.757355330000001, 132.24297468, 39.40880811, 35.0714632, 39.43957797, 70.39608675, 72.47931385, 43.32716601, 81.20133115, 62.66326206, 108.64478912, 16.53377483, 103.81237076 },
    { 76.32388493, 14.296223540000002, 60.23434381, 22.5894602, 123.65657048, 123.76020008, 19.96631643, 0, 135.94724022, 82.23859362, 3.56940038, 30.81280826, 6.97527214, 105.66614763, 27.3582176, 35.584479, 140.12078613, 9.10458683, 124.45495204999999, 31.62078548, 50.50918814, 19.47326154, 50.429770319999996, 64.69129122, 35.53914338, 73.41330852, 42.69694563, 88.67847268999999, 31.971499769999998, 96.02434812999999 },
    { 59.62335529, 150.24346376, 184.00329023, 114.6873129, 29.64652934, 247.52914649, 120.50951528, 135.94724022, 0, 100.28652584000001, 139.51664060000002, 166.76004848, 142.92251237000002, 241.61338785, 109.9185555, 138.80719928, 46.11074499, 123.11778733999999, 248.22389847000002, 155.38973190000002, 85.43805208, 155.42050176, 186.37701054000001, 188.46023763999997, 159.3080898, 197.18225494, 178.64418585, 224.62571291999998, 100.17726213, 219.79329455 },
    { 40.66317054, 96.53481716, 130.29464363, 60.9786663, 87.9958561, 193.82049990000002, 66.80086869, 82.23859362, 100.28652584000001, 0, 85.80799400000001, 113.05140188, 89.21386577000001, 187.90474125999998, 56.209908909999996, 85.09855269, 104.46007175, 69.40914074999999, 194.51525187, 101.68108531, 47.129447709999994, 101.71185516999999, 132.66836394999999, 134.75159105, 105.5994432, 143.47360834, 124.93553925, 170.91706632, 47.62525634, 166.08464795 },
    { 79.89328531, 10.72682316, 63.803744189999996, 26.15886058, 127.22597085999999, 127.32960045, 23.53571681, 3.56940038, 139.51664060000002, 85.80799400000001, 0, 27.24340788, 3.56296632, 102.09674724999999, 30.92761798, 39.15387938, 143.69018651, 5.692281009999999, 128.02435243000002, 35.19018586, 54.078588509999996, 15.90386116, 46.860369940000005, 68.2606916, 39.10854375, 76.98270889999999, 39.12754525, 85.10907232, 35.54090015, 99.59374851 },
    { 107.13669319, 16.51658472, 91.04715206, 53.40226846, 154.46937874, 154.57300833, 50.779124689999996, 30.81280826, 166.76004848, 113.05140188, 27.24340788, 0, 30.8063742, 75.66411529, 58.17102586, 66.39728726, 170.93359439, 32.93568889, 155.2677603, 62.43359374, 81.32199639, 13.5028646, 19.616962060000002, 95.50409948000001, 66.35195163, 104.22611678, 12.69491328, 58.67644035, 62.78430803, 126.83715639 },
    { 83.29915706999999, 14.28978948, 67.20961595, 10.55978912, 130.63184263, 130.73547222, 26.94158857, 6.97527214, 142.92251237000002, 89.21386577000001, 3.56296632, 30.8063742, 0, 105.65971358, 15.32854652, 42.55975115, 147.09605827000001, 2.12931468, 131.43022419000002, 38.59605763, 57.48446028,  19.46682749, 50.42333627, 71.66656337, 42.51441552, 80.38858065999999, 42.69051157, 88.67203864, 38.94677191, 102.99962028 },
    { 181.99003256, 91.36992409, 165.90049144, 128.25560782999997, 229.32271811, 229.42634771, 125.63246406, 105.66614763, 241.61338785, 187.90474125999998, 102.09674724999999, 75.66411529, 105.65971358, 0, 133.02436523, 141.25062663, 245.78693376, 107.78902826, 230.12109968000001, 137.28693311, 156.17533577, 88.35620398, 95.28107735, 170.35743886, 141.20529101, 179.07945615, 62.969202, 87.13232506, 137.6376474, 201.69049576 },
    { 50.295200210000004, 41.65444114, 75.41426759999999, 4.7687574, 97.62788576, 138.94012387, 11.92049266, 27.3582176, 109.9185555, 56.209908909999996, 30.92761798, 58.17102586, 15.32854652, 133.02436523, 0, 30.21817666, 114.09210141, 13.19923184, 139.63487585000001, 46.80070928, 24.480503419999998, 46.83147914, 77.78798791999999, 79.87121502000001, 50.71906717, 88.59323232, 70.05516322999999, 116.03669029000001, 5.94281505, 111.20427193 },
    { 79.18384399, 49.880702539999994, 60.252069590000005, 25.44941926, 126.51652954999999, 123.77792585, 19.212667449999998, 35.584479, 138.80719928, 85.09855269, 39.15387938, 66.39728726, 42.55975115, 141.25062663, 30.21817666, 0, 142.98074519000002, 31.05503933, 124.47267783, 55.02697068, 53.3691472, 55.05774054, 86.01424932, 64.709017, 35.556869150000004, 73.4310343, 78.28142463, 124.2629517, 34.83145883, 96.04207391 },
    { 63.7969012, 154.41700967, 188.17683613999998, 118.86085881, 19.16663329, 210.48011813, 124.68306119, 140.12078613, 46.11074499, 104.46007175, 143.69018651, 170.93359439, 147.09605827000001, 245.78693376, 114.09210141, 142.98074519000002, 0, 127.29133325000001, 211.17487011, 159.56327781, 89.61159799, 159.59404766999998, 190.55055645, 192.63378355, 163.48163570999998, 201.35580084999998, 182.81773176000002, 228.79925882, 104.35080804, 186.80858923 },
    { 63.49443205, 16.41910417, 69.33893064, 8.430474440000001, 110.82711760000001, 132.8647869, 12.757355330000001, 9.10458683, 123.11778733999999, 69.40914074999999, 5.692281009999999, 32.93568889, 2.12931468, 107.78902826, 13.19923184, 31.05503933, 127.29133325000001, 0, 133.55953888000002, 40.72537231, 37.679735259999994, 21.59614217, 52.55265095, 73.79587805, 44.6437302, 82.51789534999999, 44.81982626, 90.80135332, 19.14204689, 105.12893496 },
    { 188.60054317, 138.75117559, 64.22060824, 134.86611845, 235.93322873, 22.86245531, 132.24297468, 124.45495204999999, 248.22389847000002, 194.51525187, 128.02435243000002, 155.2677603, 131.43022419000002, 230.12109968000001, 139.63487585000001, 124.47267783, 211.17487011, 133.55953888000002, 0, 122.60387401000001, 162.78584637999998, 143.92821359, 174.88472237000002, 102.49720804, 93.56107612000001, 62.83737246, 167.15189767, 213.13342473999998, 144.24815801, 28.43060392 },
    { 95.76637661, 45.91700902, 58.38326577, 42.03195188, 143.09906216, 121.90912204, 39.40880811, 31.62078548, 155.38973190000002, 101.68108531, 35.19018586, 62.43359374, 38.59605763, 137.28693311, 46.80070928, 55.02697068, 159.56327781, 40.72537231, 122.60387401000001, 0, 69.95167982, 51.09404703, 58.58117255, 53.060143839999995, 33.68806534, 71.56223048000001, 74.31773111, 120.29925818, 51.41399145, 94.17327008999999 },
    { 25.81469679, 64.80541167000001, 98.56523814, 29.24926082, 73.14738235, 162.09109441, 35.0714632, 50.50918814, 85.43805208, 47.129447709999994, 54.078588509999996, 81.32199639, 57.48446028, 156.17533577, 24.480503419999998, 53.3691472, 89.61159799, 37.679735259999994, 162.78584637999998, 69.95167982, 0, 69.98244968, 100.93895846000001, 103.02218556, 73.87003771, 111.74420285000001, 93.20613376, 139.18766083, 14.73921005, 134.35524247 },
    { 95.79714647, 5.177038, 79.70760535, 42.06272174, 143.12983203, 143.23346161999999, 39.43957797, 19.47326154, 155.42050176, 101.71185516999999, 15.90386116, 13.5028646, 19.46682749, 88.35620398, 46.83147914, 55.05774054, 159.59404766999998, 21.59614217, 143.92821359, 51.09404703, 69.98244968, 0, 33.119826669999995, 84.16455277, 55.01240492, 92.88657006, 25.38700197, 71.36852904, 51.44476131, 115.49760967 },
    { 126.75365525000001, 36.133546779999996, 110.66411413, 73.01923052, 174.0863408, 174.1899704, 70.39608675, 50.429770319999996, 186.37701054000001, 132.66836394999999, 46.860369940000005, 19.616962060000002, 50.42333627, 95.28107735, 77.78798791999999, 86.01424932, 190.55055645, 52.55265095, 174.88472237000002, 58.58117255, 100.93895846000001, 33.119826669999995, 0, 72.06632843999999, 85.9689137, 123.84307884, 32.31187535, 78.29340241, 82.40127009, 146.45411845 },
    { 128.83688235000002, 78.98751476, 58.492615730000004, 75.10245762000001, 176.1695679, 101.80245607, 72.47931385, 64.69129122, 188.46023763999997, 134.75159105, 68.2606916, 95.50409948000001, 71.66656337, 170.35743886, 79.87121502000001, 64.709017, 192.63378355, 73.79587805, 102.49720804, 53.060143839999995, 103.02218556, 84.16455277, 72.06632843999999, 0, 29.152147850000002, 39.65983558, 107.38823685, 153.36976392, 84.48449719, 74.06660412 },
    { 99.6847345, 49.83536692, 29.34046788, 45.95030978, 147.01742006, 92.86632415, 43.32716601, 35.53914338, 159.3080898, 105.5994432, 39.10854375, 66.35195163, 42.51441552, 141.20529101, 50.71906717, 35.556869150000004, 163.48163570999998, 44.6437302, 93.56107612000001, 33.68806534, 73.87003771, 55.01240492, 85.9689137, 29.152147850000002, 0, 37.874165139999995, 78.236089, 124.21761607, 55.33234934, 65.1304722 },
    { 137.55889965, 87.70953206, 18.109396320000002, 83.82447492, 184.8915852, 62.14262049, 81.20133115, 73.41330852, 197.18225494, 143.47360834, 76.98270889999999, 104.22611678, 80.38858065999999, 179.07945615, 88.59323232, 73.4310343, 201.35580084999998, 82.51789534999999, 62.83737246, 71.56223048000001, 111.74420285000001, 92.88657006, 123.84307884, 39.65983558, 37.874165139999995, 0, 116.11025415, 162.09178121, 93.20651448000001, 34.40676855 },
    { 119.02083056, 28.400722090000002, 102.93128943, 65.28640583, 166.35351611, 166.45714569999998, 62.66326206, 42.69694563, 178.64418585, 124.93553925, 39.12754525, 12.69491328, 42.69051157, 62.969202, 70.05516322999999, 78.28142463, 182.81773176000002, 44.81982626, 167.15189767, 74.31773111, 93.20613376, 25.38700197, 32.31187535, 107.38823685, 78.236089, 116.11025415, 0, 45.98152707, 74.66844540000001, 138.72129376 },
    { 165.00235762, 74.38224916, 148.9128165, 111.26793289999999, 212.33504318, 212.43867277, 108.64478912, 88.67847268999999, 224.62571291999998, 170.91706632, 85.10907232, 58.67644035, 88.67203864, 87.13232506, 116.03669029000001, 124.2629517, 228.79925882, 90.80135332, 213.13342473999998, 120.29925818, 139.18766083, 71.36852904, 78.29340241, 153.36976392, 124.21761607, 162.09178121, 45.98152707, 0, 120.64997246, 184.70282083 },
    { 40.553906839999996, 46.26772331, 80.02754977000001, 10.71157245, 87.88659239, 143.55340604, 16.53377483, 31.971499769999998, 100.17726213, 47.62525634, 35.54090015, 62.78430803, 38.94677191, 137.6376474, 5.94281505, 34.83145883, 104.35080804, 19.14204689, 144.24815801, 51.41399145, 14.73921005, 51.44476131, 82.40127009, 84.48449719, 55.33234934, 93.20651448000001, 74.66844540000001, 120.64997246, 0, 115.8175541 },
    { 160.16993926, 110.32057166999999, 35.79000432, 106.43551453, 207.50262481000001, 27.73585194, 103.81237076, 96.02434812999999, 219.79329455, 166.08464795, 99.59374851, 126.83715639, 102.99962028, 201.69049576, 111.20427193, 96.04207391, 186.80858923, 105.12893496, 28.43060392, 94.17327008999999, 134.35524247, 115.49760967, 146.45411845, 74.06660412, 65.1304722, 34.40676855, 138.72129376, 184.70282083, 115.8175541, 0 },
};
        double[,] districtBorderMatrix = (double[,])districtdistanceMatrix.Clone();
        Dictionary<int, List<int>> districtForNeigbour = new Dictionary<int, List<int>>
        {
            { 1, new List<int> { 5, 12, 23 } },
            { 2, new List<int> { 15, 21, 24 } },
            { 3, new List<int> { 18, 25, 27, 28, 29 } },
            { 4, new List<int> { 7, 17, 21 } },
            { 5, new List<int> { 1, 11, 19 } },
            { 6, new List<int> { 20, 25 } },
            { 7, new List<int> { 4, 8, 18, 21, 23 } },
            { 8, new List<int> { 7, 13, 15, 18, 21, 22, 29 } },
            { 9, new List<int> { 30 } },
            { 10, new List<int> { 17, 23 } },
            { 11, new List<int> { 5 } },
            { 12, new List<int> { 1, 23 } },
            { 13, new List<int> { 8, 15, 22 } },
            { 14, new List<int> { 15, 24, 26, 30 } },
            { 15, new List<int> { 2, 8, 13, 14, 21, 22, 26 } },
            { 16, new List<int> { 30 } },
            { 17, new List<int> { 4, 10, 23 } },
            { 18, new List<int> { 3, 7, 8, 30 } },
            { 19, new List<int> { 5 } },
            { 20, new List<int> { 6, 25 } },
            { 21, new List<int> { 2, 4, 8, 15, 17 } },
            { 22, new List<int> { 8, 13, 14, 15, 27, 28, 30 } },
            { 23, new List<int> { 1, 7, 10, 12, 17 } },
            { 24, new List<int> { 2, 14, 15 } },
            { 25, new List<int> { 3, 6, 20, 28 } },
            { 26, new List<int> { 14, 22, 30 } },
            { 27, new List<int> { 22, 28, 29 } },
            { 28, new List<int> { 3, 25, 27, 29 } },
            { 29, new List<int> { 3, 8, 18, 22, 27, 28 } },
            { 30, new List<int> { 9, 14, 16, 26 } }
        };
        for (int i = 0; i < 30; i++)
        {
            for (int j = 0; j < 30; j++)
            {
                if (i != j && (districtForNeigbour.ContainsKey(i + 1) && !districtForNeigbour[i + 1].Contains(j + 1)))
                {
                    districtBorderMatrix[i,j] = int.MaxValue;
                }
            }
        }



        //districtBorderMatrix debug
        //for (int i = 0; i < 30; i++)
        //{

        //    for (int j = 0; j < 30; j++)
        //    {
        //        Console.Write($"{districtBorderMatrix[i,j]} ");
        //    }
        //    Console.WriteLine("");
        //    Console.WriteLine("");
        //    Console.WriteLine("");
        //}


        static double DijkstraDouble(double[,] graph, int source, int destination)
        {
            int n = graph.GetLength(0); 
            double[] mesafe = new double[n]; 
            bool[] ziyaretEdilen = new bool[n]; 

            
            for (int i = 0; i < n; i++)
            {
                mesafe[i] = double.MaxValue;
                ziyaretEdilen[i] = false;
            }

            mesafe[source] = 0; 

            for (int count = 0; count < n - 1; count++)
            {
                int u = MinDistanceDouble(mesafe, ziyaretEdilen, n);
                ziyaretEdilen[u] = true;

                for (int v = 0; v < n; v++)
                {
                    if (!ziyaretEdilen[v] && graph[u, v] != double.MaxValue && mesafe[u] != double.MaxValue && mesafe[u] + graph[u, v] < mesafe[v])
                    {
                        mesafe[v] = mesafe[u] + graph[u, v];
                    }
                }
            }

            return mesafe[destination]; 
        }


        static int MinDistanceDouble(double[] dist, bool[] visited, int n)
        {
            double min = double.MaxValue;
            int minIndex = -1;

            for (int v = 0; v < n; v++)
            {
                if (visited[v] == false && dist[v] <= min)
                {
                    min = dist[v];
                    minIndex = v;
                }
            }

            return minIndex;
        }
        for (int district1 = 0; district1 < 30; district1++)
        {

            for (int district2 = 0; district2 < 30; district2++)
            {
                if (district1 != district2)
                {
                    double minDistancesDistrict = DijkstraDouble(districtBorderMatrix, district1, district2);
                    double normalDistanceDistrict = districtdistanceMatrix[district1, district2];

                    double differenceDistrict = normalDistanceDistrict - minDistancesDistrict;

                    Console.WriteLine($"{district[district1]} - {district[district2]}: Orijinal: {normalDistanceDistrict} km, Hesaplanan: {minDistancesDistrict} km, Fark: {differenceDistrict}");
                }
            }
        }
    }

}
